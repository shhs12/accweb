@page "/fetchdata"
@using System.IO
@*@inject HttpClient Http

    <h1>Weather forecast</h1>

    <p>This component demonstrates fetching data from the server.</p>

    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }*@
<RadzenTree Expand=@OnExpand Change=@OnChange Style="width: 100%; height: 300px">
    <RadzenTreeItem Text="BMW">
        <RadzenTreeItem Text="M3" />
        <RadzenTreeItem Text="M5" />
    </RadzenTreeItem>
    <RadzenTreeItem Text="Audi">
        <RadzenTreeItem Text="RS4" />
        <RadzenTreeItem Text="RS6" />
    </RadzenTreeItem>
    <RadzenTreeItem Text="Mercedes">
        <RadzenTreeItem Text="C63 AMG" />
        <RadzenTreeItem Text="S63 AMG" />
    </RadzenTreeItem>
</RadzenTree>
@code {
    //private WeatherForecast[] forecasts;

    //protected override async Task OnInitializedAsync()
    //{
    //    forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    //}

    //public class WeatherForecast
    //{
    //    public DateTime Date { get; set; }

    //    public int TemperatureC { get; set; }

    //    public string Summary { get; set; }

    //    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    //}

   

    void Log(string eventName, string value)
    {
        //console.Log($"{eventName}: {value}");
    }

    void OnChange(TreeEventArgs args)
    {
       // Log("Change", $"Item Text: {args.Text}");
    }

    void OnExpand(TreeExpandEventArgs args)
    {
        

        if (args.Value is string text)
        {
            //Log("Expand", $"Text: {text}");
        }
    }

    
    }
}

<style>
    .rz-tree-container, .rz-treenode-children {
        list-style: none;
        padding: 0;
        margin: 0;
        direction: rtl;
        text-align: justify;
    }


    .rz-tree-toggler.rzi-caret-right:before {
        content: "arrow_left";
    }

    .rz-treenode-children {
        padding: 0 1rem 0 0;
    }
</style>